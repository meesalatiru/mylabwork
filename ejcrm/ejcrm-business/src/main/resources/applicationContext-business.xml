<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd"
	default-lazy-init="true">

	<import resource="applicationContext-integration.xml"/>

    <!-- Add new DAOs here -->

    <!-- Add new Managers here -->
	<!--
		This is the main configuration file for our JPA work. All the magic is
		here.
	-->
	<!--
		First we set up a nice little property configurer, so you can just
		modify jdbc.properties to point to a different database.
	-->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="/WEB-INF/classes/jdbc.properties" />
	</bean>
	<!--
		Now we set up a simple datasource. Use a better one in production.
	-->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- At last, the entity manager. -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="ApplicationEntityManager" />
		<property name="dataSource" ref="dataSource" />
		<property name="loadTimeWeaver">
			<!--
				InstrumentationLoadTimeWeaver expects you to start the appserver
				with
				-javaagent:/Java/workspace2/spring/dist/weavers/spring-agent.jar
			-->
			<bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
			<!--
				<bean
				class="org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver"/>
			-->
			<!--
				I could not get SimpleLoadTimeWeaver to work. If someone can, let me
				know how...
			-->
			<!--
				<bean
				class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver"/>
			-->
		</property>
		<!--  I'm not sure this is really necessary.. -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform"
						value="org.hibernate.dialect.HSQLDialect"/>
				<property name="generateDdl" value="true"/>
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>
	<!--
		A simple transaction manager for our (single) EntityManagerFactory.
	-->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>



	<!-- We want to use Spring's declarative @Transaction management -->
	<tx:annotation-driven />
	<!--
		This makes Spring perform the magic
		@PersistenceContext/@PersitenceUnit injection
	-->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<!--
		Here's our DAO (which we call "service" - sorry. I wish I had a better
		refactoring tool.)
	-->
	<bean id="ejcrmService" class="net.sf.ejcrm.business.EjcrmServiceImpl" />
</beans>